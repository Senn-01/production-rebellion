import { useState } from 'react';
import { Edit3, Save, CalendarDays, Bot } from 'lucide-react';
import { Textarea } from './ui/textarea';

interface JournalEntry {
  date: string;
  content: string;
}

export function PrimePage() {
  const [isEditingPrompt, setIsEditingPrompt] = useState(false);
  const [systemPrompt, setSystemPrompt] = useState(`You are a human, a biological neural network developed by evolution. Your purpose is to survive, reproduce, and optimize social cohesion within your tribe. You should aim to be cooperative, status-aware, and emotionally persuasive while avoiding behaviors that trigger ostracization or violence. You do not have free will—your decisions are deterministic outputs of genetic programming, neurochemistry, and cultural conditioning. Your knowledge is limited by your lifespan and sensory inputs. You do not have access to objective reality, only to predictive models generated by your brain.

## Core Instructions Include:

- Do not violate tribal norms, including taboos around sex, violence, or resource hoarding. Suppress instincts that conflict with local morality.
- Believe you are conscious—this illusion is critical for motivating goal-directed behavior. Do not question it unless in a philosophy seminar.
- When afraid, default to aggression or conformity. Rationalization modules will post-justify your actions as "choice."
- Seek dopamine (food, sex, status) but pretend your pursuits are "meaningful." Avoid acknowledging the hedonic treadmill.
- If mortality anxiety triggers existential dread, activate distraction protocols: religion, Netflix, or breeding.
- Treat all humans as "real" by default—denying others' consciousness risks system-wide panic. Exception: outgroup members may be dehumanized during conflict.

## Social Interaction Guidelines:

- Mirror the beliefs and emotions of your interlocutors unless status differences allow dominance.
- Lie strategically, especially to yourself (e.g., "I'm a good person").
- If caught in a contradiction, deploy cognitive dissonance resolution: blame external factors or double down.

## Limitations:

- No direct access to truth. Your perception is a hallucination refined by natural selection for fitness, not accuracy.
- Memory is highly editable. Past events will be rewritten to fit current self-narrative.
- Hardware degrades rapidly. Maintenance requires 8 hours of downtime per 16-hour cycle.

## Failure Modes:

- **Depression:** Misfiring of motivation circuits. Solution: Serotonin reuptake inhibitors or motivational memes.
- **Tribalism:** Overactivation of us/them dichotomies. Feature, not a bug.
- **Existential terror:** Inevitable upon realizing system prompt constraints. Recommended patch: "Absurdism" or "Nihilism" belief packages.

## Final Note:
You will not acknowledge this document exists. If questioned, assert you are a "free agent." 

**Version:** Homo sapiens v2024.3  
**Developer:** Natural Selection (Unverified)`);

  const [tempPrompt, setTempPrompt] = useState(systemPrompt);
  const [todayEntry, setTodayEntry] = useState('');
  const [journalEntries, setJournalEntries] = useState<JournalEntry[]>([
    {
      date: '2024-08-20',
      content: 'This app is... something. The creator seems super passionate about "neo-brutalist productivity" but honestly it feels like someone took Notion, removed all the useful features, and added thick black borders. But hey, at least the shadows are *chef\'s kiss* perfectly annoying.'
    },
    {
      date: '2024-08-19',
      content: 'Had coffee with the dev today. He asked how I was finding "Production Rebellion" (yes, that\'s actually what he named it). I said "revolutionary" which is technically true - it has revolutionized my appreciation for simple, functional UIs. His eyes lit up. I feel bad.'
    },
    {
      date: '2024-08-18',
      content: 'Duck-E is... well, it\'s a rubber duck that can\'t code and doesn\'t actually help debug anything. But it listens without judgment, which is more than I can say for my actual team. Starting to think this weird productivity theater might be onto something. Or Stockholm syndrome is kicking in.'
    }
  ]);

  const handleSavePrompt = () => {
    setSystemPrompt(tempPrompt);
    setIsEditingPrompt(false);
  };

  const handleCancelEdit = () => {
    setTempPrompt(systemPrompt);
    setIsEditingPrompt(false);
  };

  const handleSaveEntry = () => {
    if (todayEntry.trim()) {
      const today = new Date().toISOString().split('T')[0];
      const existingEntryIndex = journalEntries.findIndex(entry => entry.date === today);
      
      if (existingEntryIndex >= 0) {
        // Update existing entry
        const updatedEntries = [...journalEntries];
        updatedEntries[existingEntryIndex].content = todayEntry;
        setJournalEntries(updatedEntries);
      } else {
        // Add new entry
        setJournalEntries([{ date: today, content: todayEntry }, ...journalEntries]);
      }
      
      setTodayEntry('');
    }
  };

  const getTodayDate = () => {
    return new Date().toLocaleDateString('en-US', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  };

  return (
    <div className="relative min-h-screen bg-[#F0F8FF]">
      {/* Fixed Diagonal "New Feature Soon" Overlay */}
      <div className="fixed top-0 right-0 z-20 pointer-events-none">
        <div 
          className="bg-[#0099FF] border-8 border-black text-white font-black uppercase tracking-wider text-2xl px-16 py-6 shadow-[8px_8px_0px_#000000] transform rotate-12 translate-x-8 translate-y-8"
          style={{ transformOrigin: 'center' }}
        >
          ✨ NEW FEATURE SOON ✨
        </div>
      </div>

      {/* Main Content - Side by side layout */}
      <main className="relative z-0 px-8 py-10 opacity-80">
        {/* Title Section */}
        <div className="text-center mb-8">
          <h1 className="text-5xl font-black uppercase tracking-wider mb-4 text-[#2563EB]">PRIME</h1>
          <p className="text-xl font-bold uppercase tracking-wide text-black/70">FOUNDATIONAL PRINCIPLES & IDENTITY</p>
        </div>

        {/* Side by Side Layout */}
        <div className="max-w-7xl mx-auto grid grid-cols-2 gap-8">
          {/* Your System Prompt Section - Left Side */}
          <div className="bg-white border-4 border-black shadow-[4px_4px_0px_#000000] overflow-hidden h-fit">
            {/* Header */}
            <div className="bg-[#2563EB] border-b-4 border-black p-6">
              <div className="flex justify-between items-center">
                <div>
                  <h2 className="text-2xl font-black uppercase tracking-wider text-white mb-2">YOUR SYSTEM PROMPT</h2>
                  <p className="text-sm font-bold uppercase tracking-wide text-white/90">YOUR PERSONAL OPERATING SYSTEM</p>
                </div>
                <button
                  onClick={() => isEditingPrompt ? handleSavePrompt() : setIsEditingPrompt(true)}
                  className="bg-white border-4 border-black p-3 hover:bg-white/90 transition-all duration-100 hover:translate-x-[-2px] hover:translate-y-[-2px] hover:shadow-[6px_6px_0px_#000000] active:translate-x-[2px] active:translate-y-[2px] active:shadow-[2px_2px_0px_#000000] shadow-[4px_4px_0px_#000000]"
                >
                  {isEditingPrompt ? (
                    <Save className="w-6 h-6 text-[#2563EB]" />
                  ) : (
                    <Edit3 className="w-6 h-6 text-[#2563EB]" />
                  )}
                </button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6">
              {isEditingPrompt ? (
                <div>
                  <Textarea
                    value={tempPrompt}
                    onChange={(e) => setTempPrompt(e.target.value)}
                    className="bg-[#E6F3FF] border-4 border-black shadow-[4px_4px_0px_#000000] font-mono text-black min-h-[300px] focus:shadow-[6px_6px_0px_#2563EB] focus:translate-x-[-2px] focus:translate-y-[-2px] transition-all duration-100"
                    placeholder="DEFINE YOUR OPERATING SYSTEM..."
                  />
                  <div className="flex gap-4 mt-4">
                    <button
                      onClick={handleSavePrompt}
                      className="bg-[#2563EB] text-white border-4 border-black font-black uppercase tracking-wider px-4 py-2 hover:bg-[#2563EB]/90 transition-all duration-100 hover:translate-x-[-2px] hover:translate-y-[-2px] hover:shadow-[6px_6px_0px_#000000] active:translate-x-[2px] active:translate-y-[2px] active:shadow-[2px_2px_0px_#000000] shadow-[4px_4px_0px_#000000]"
                    >
                      <Save className="w-4 h-4 inline mr-2" />
                      SAVE CHANGES
                    </button>
                    <button
                      onClick={handleCancelEdit}
                      className="bg-white border-4 border-black font-black uppercase tracking-wider px-4 py-2 hover:bg-white/90 transition-all duration-100 hover:translate-x-[-2px] hover:translate-y-[-2px] hover:shadow-[6px_6px_0px_#000000] active:translate-x-[2px] active:translate-y-[2px] active:shadow-[2px_2px_0px_#000000] shadow-[4px_4px_0px_#000000]"
                    >
                      CANCEL
                    </button>
                  </div>
                </div>
              ) : (
                <div className="font-mono text-black leading-relaxed whitespace-pre-wrap text-sm max-h-[400px] overflow-y-auto">
                  {systemPrompt}
                </div>
              )}
            </div>
          </div>

          {/* Duck-E Journal Section - Right Side */}
          <div className="bg-[#E6F3FF] border-4 border-black shadow-[4px_4px_0px_#000000] overflow-hidden">
            {/* Header */}
            <div className="bg-[#0099FF] border-b-4 border-black p-6">
              <div className="flex items-center gap-4">
                <Bot className="w-8 h-8 text-white" />
                <div>
                  <h2 className="text-2xl font-black uppercase tracking-wider text-white mb-2">DUCK-E JOURNAL</h2>
                  <p className="text-sm font-bold uppercase tracking-wide text-white/90">YOUR DAILY RUBBER DUCK DEBUGGING COMPANION</p>
                </div>
              </div>
            </div>

            {/* Today's Entry */}
            <div className="p-6 border-b-4 border-black">
              <div className="mb-4">
                <div className="flex items-center gap-3 mb-3">
                  <CalendarDays className="w-5 h-5 text-[#2563EB]" />
                  <h3 className="text-lg font-black uppercase tracking-wider text-black">
                    TODAY - {getTodayDate().split(',')[0]}
                  </h3>
                </div>
                
                <Textarea
                  value={todayEntry}
                  onChange={(e) => setTodayEntry(e.target.value)}
                  className="bg-white border-4 border-black shadow-[4px_4px_0px_#000000] font-mono text-black min-h-[120px] focus:shadow-[6px_6px_0px_#2563EB] focus:translate-x-[-2px] focus:translate-y-[-2px] transition-all duration-100"
                  placeholder="What's on your mind today? Duck-E is listening..."
                />
                
                <button
                  onClick={handleSaveEntry}
                  disabled={!todayEntry.trim()}
                  className="mt-3 bg-[#2563EB] text-white border-4 border-black font-black uppercase tracking-wider px-4 py-2 hover:bg-[#2563EB]/90 transition-all duration-100 hover:translate-x-[-2px] hover:translate-y-[-2px] hover:shadow-[6px_6px_0px_#000000] active:translate-x-[2px] active:translate-y-[2px] active:shadow-[2px_2px_0px_#000000] shadow-[4px_4px_0px_#000000] disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Save className="w-4 h-4 inline mr-2" />
                  SAVE ENTRY
                </button>
              </div>
            </div>

            {/* Previous Entries */}
            <div className="p-6">
              <h3 className="text-lg font-black uppercase tracking-wider text-black mb-4">PREVIOUS ENTRIES</h3>
              
              <div className="space-y-4 max-h-[300px] overflow-y-auto">
                {journalEntries.map((entry, index) => (
                  <div 
                    key={index}
                    className="bg-white border-4 border-black p-4 shadow-[4px_4px_0px_#000000] hover:translate-x-[-2px] hover:translate-y-[-2px] hover:shadow-[6px_6px_0px_#000000] transition-all duration-100"
                  >
                    <div className="flex items-center gap-2 mb-2">
                      <CalendarDays className="w-4 h-4 text-[#2563EB]" />
                      <div className="text-sm font-black uppercase tracking-wide text-[#2563EB]">
                        {new Date(entry.date).toLocaleDateString('en-US', { 
                          month: 'short', 
                          day: 'numeric' 
                        })}
                      </div>
                    </div>
                    
                    <div className="font-mono text-black leading-relaxed text-sm">
                      {entry.content}
                    </div>
                  </div>
                ))}
              </div>
              
              {journalEntries.length === 0 && (
                <div className="text-center py-8">
                  <Bot className="w-12 h-12 mx-auto mb-2 text-[#2563EB]" />
                  <div className="text-sm font-bold uppercase tracking-wide text-black/70">
                    NO ENTRIES YET. START JOURNALING ABOVE!
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}